{"version":3,"sources":["components/Carousel/Carousel.tsx","components/TextInput/TextInput.tsx","components/CarouselRulesForm/CarouselRulesForm.tsx","App.tsx","index.tsx"],"names":["Carousel","images","carouselRules","animationDuration","itemWidth","step","frameSize","useState","translateXValue","setTranslateXValue","className","style","width","transition","transform","map","image","src","alt","onClick","newTranslateXValue","Math","max","type","disabled","min","length","TextInput","placeholder","labelText","inputName","hasError","onChange","htmlFor","event","name","toLowerCase","INITIAL_NEW_CAROUSEL_RULES","infinite","CarouselRulesForm","onSubmit","newCarouselRules","setNewCarouselRules","formState","setFormState","hasItemWidthError","setHasItemWidthError","hasFrameSizeError","setHasFrameSizeError","hasStepError","setHasStepError","hasAnimationDurationError","setHasAnimationDurationError","handleFieldChanged","fieldName","target","value","handleReset","currentState","handleSubmit","preventDefault","onReset","checked","handleInfiniteInputChanged","App","state","updateCarouselRules","newRules","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1a82c0e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\nimport { CarouselRules } from '../../types/CarouselRules';\n\ntype Props = {\n  images: string[],\n  carouselRules: CarouselRules,\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  carouselRules: {\n    animationDuration,\n    itemWidth,\n    step,\n    frameSize,\n  },\n}) => {\n  const [translateXValue, setTranslateXValue] = useState(0);\n\n  const handleNextButtonClicked = () => {\n    const newTranslateXValue = Math.min(\n      (images.length - frameSize) * itemWidth,\n      translateXValue + step * itemWidth,\n    );\n\n    setTranslateXValue(newTranslateXValue);\n  };\n\n  const handlePrevButtonClicked = () => {\n    const newTranslateXValue = Math.max(0, translateXValue - step * itemWidth);\n\n    setTranslateXValue(newTranslateXValue);\n  };\n\n  return (\n    <div\n      className=\"Carousel\"\n      style={{\n        width: `${frameSize * itemWidth}px`,\n      }}\n    >\n      <ul\n        className=\"Carousel__list\"\n        style={{\n          transition: `transform ${animationDuration}ms`,\n          transform: `translateX(${-(translateXValue)}px)`,\n        }}\n      >\n        {images.map(image => (\n          <li\n            className=\"Carousel__item\"\n            key={image}\n          >\n            <img\n              style={{\n                width: `${itemWidth}px`,\n              }}\n              className=\"Carousel__image\"\n              src={image}\n              alt={image}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <button\n        onClick={handlePrevButtonClicked}\n        className=\"button is-info mr-2 Carousel__button--prev\"\n        type=\"button\"\n        disabled={translateXValue === 0}\n      >\n        Prev\n      </button>\n      <button\n        onClick={handleNextButtonClicked}\n        data-cy=\"next\"\n        className=\"button is-info Carousel__button--next\"\n        type=\"button\"\n        disabled={translateXValue === (images.length - frameSize) * itemWidth}\n      >\n        Next\n      </button>\n\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\n\ntype Props = {\n  hasError: boolean,\n  placeholder: string,\n  labelText: string,\n  inputName: string,\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void,\n};\n\nexport const TextInput: React.FC<Props> = ({\n  placeholder,\n  labelText,\n  inputName,\n  hasError,\n  onChange,\n}) => {\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={inputName}>{labelText}</label>\n\n      <div className=\"control\">\n        <input\n          onChange={(event) => onChange(event)}\n          name={inputName}\n          className=\"input\"\n          type=\"text\"\n          placeholder={placeholder}\n        />\n      </div>\n      {hasError\n        && <p className=\"help is-danger\">{`Invalid ${labelText.toLowerCase()}`}</p>}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextInput } from '../TextInput';\nimport { CarouselRules } from '../../types/CarouselRules';\n\nconst INITIAL_NEW_CAROUSEL_RULES: CarouselRules = {\n  step: 0,\n  frameSize: 0,\n  itemWidth: 0,\n  animationDuration: 0,\n  infinite: false,\n};\n\ntype Props = {\n  onSubmit: (newRules: CarouselRules) => void,\n};\n\nexport const CarouselRulesForm: React.FC<Props> = ({\n  onSubmit,\n}) => {\n  const [newCarouselRules, setNewCarouselRules]\n    = useState(INITIAL_NEW_CAROUSEL_RULES);\n  const [formState, setFormState] = useState(0);\n\n  const [hasItemWidthError, setHasItemWidthError] = useState(false);\n  const [hasFrameSizeError, setHasFrameSizeError] = useState(false);\n  const [hasStepError, setHasStepError] = useState(false);\n  const [hasAnimationDurationError, setHasAnimationDurationError]\n    = useState(false);\n\n  const handleFieldChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const fieldName = event.target.name;\n    // eslint-disable-next-line prefer-destructuring\n    const value = +event.target.value;\n\n    setNewCarouselRules({\n      ...newCarouselRules,\n      [fieldName]: value,\n    });\n  };\n\n  const handleReset = () => {\n    setFormState(currentState => currentState + 1);\n    setNewCarouselRules(INITIAL_NEW_CAROUSEL_RULES);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setHasAnimationDurationError(!(newCarouselRules.animationDuration > 0));\n    setHasFrameSizeError(!(newCarouselRules.frameSize > 0));\n    setHasItemWidthError(!(newCarouselRules.itemWidth > 0));\n    setHasStepError(!(newCarouselRules.step > 0));\n\n    if (newCarouselRules.animationDuration > 0\n      && newCarouselRules.frameSize > 0\n      && newCarouselRules.itemWidth > 0\n      && newCarouselRules.step > 0\n    ) {\n      onSubmit(newCarouselRules);\n      handleReset();\n    }\n  };\n\n  const handleInfiniteInputChanged\n  = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewCarouselRules({\n      ...newCarouselRules,\n      infinite: event.target.checked,\n    });\n  };\n\n  return (\n    <form\n      className=\"box App__form\"\n      key={formState}\n      onReset={handleReset}\n      onSubmit={(event) => handleSubmit(event)}\n    >\n\n      <TextInput\n        inputName=\"itemWidth\"\n        placeholder=\"Enter item width\"\n        labelText=\"Item width\"\n        hasError={hasItemWidthError}\n        onChange={handleFieldChanged}\n      />\n\n      <TextInput\n        inputName=\"frameSize\"\n        placeholder=\"Enter frame size\"\n        labelText=\"Frame size\"\n        hasError={hasFrameSizeError}\n        onChange={handleFieldChanged}\n      />\n\n      <TextInput\n        inputName=\"step\"\n        placeholder=\"Enter step\"\n        labelText=\"Step\"\n        hasError={hasStepError}\n        onChange={handleFieldChanged}\n      />\n\n      <TextInput\n        inputName=\"animationDuration\"\n        placeholder=\"Enter animation duration\"\n        labelText=\"Animation duration\"\n        hasError={hasAnimationDurationError}\n        onChange={handleFieldChanged}\n      />\n\n      <div className=\"field\">\n        <div className=\"control\">\n          <label className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              onChange={(event) => handleInfiniteInputChanged(event)}\n            />\n            Infinite mode\n          </label>\n        </div>\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button type=\"submit\" className=\"button is-link\">\n            Submit\n          </button>\n        </div>\n        <div className=\"control\">\n          {/* eslint-disable-next-line */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Cancel\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport 'bulma';\nimport './App.scss';\nimport Carousel from './components/Carousel/Carousel';\nimport { CarouselRules } from './types/CarouselRules';\nimport { CarouselRulesForm } from './components/CarouselRulesForm';\n\ninterface State {\n  images: string[];\n  carouselRules: CarouselRules;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n\n    carouselRules: {\n      step: 3,\n      frameSize: 3,\n      itemWidth: 130,\n      animationDuration: 1000,\n      infinite: false,\n    },\n  };\n\n  updateCarouselRules = (newRules: CarouselRules) => {\n    this.setState((currentState) => ({\n      carouselRules: { ...newRules },\n      images: currentState.images,\n    }));\n  };\n\n  render() {\n    const { images } = this.state;\n    const { carouselRules } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 data-cy=\"title\" className=\"title has-text-centered pb-6\">\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <Carousel\n          images={this.state.images}\n          carouselRules={carouselRules}\n        />\n\n        <CarouselRulesForm\n          onSubmit={this.updateCarouselRules}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}