{"version":3,"sources":["components/Carousel/Carousel.tsx","components/TextInput/TextInput.tsx","components/CarouselRulesForm/CarouselRulesForm.tsx","constants/InitialCarouselRules.ts","App.tsx","index.tsx"],"names":["Carousel","images","carouselRules","animationDuration","itemWidth","step","frameSize","useState","translateXValue","setTranslateXValue","maxTranslationXValue","length","className","style","width","transition","transform","map","image","src","alt","onClick","newTranslateXValue","Math","max","type","disabled","min","TextInput","placeholder","labelText","inputName","hasError","inputInitialValue","onChange","inputValue","setInputValue","htmlFor","event","target","value","name","toLowerCase","defaultCarouselRulesFormErrors","hasItemWidthError","hasFrameSizeError","hasStepError","hasAnimationDurationError","resetedCarouselRules","infinite","CarouselRulesForm","onSubmit","initialCarouselRules","newCarouselRules","setNewCarouselRules","formState","setFormState","errors","setErrors","handleFieldChanged","fieldName","handleReset","currentState","onReset","preventDefault","checked","handleInfiniteInputChanged","App","state","updateCarouselRules","newRules","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"uQA0FeA,EAjFmB,SAAC,GAQ5B,IAPLC,EAOI,EAPJA,OAOI,IANJC,cACEC,EAKE,EALFA,kBACAC,EAIE,EAJFA,UACAC,EAGE,EAHFA,KACAC,EAEE,EAFFA,UAGF,EAA8CC,mBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAiBMC,GAAwBT,EAAOU,OAASL,GAAaF,EAE3D,OACE,sBACEQ,UAAU,WACVC,MAAO,CACLC,MAAM,GAAD,OAAKR,EAAYF,EAAjB,OAHT,UAME,oBACEQ,UAAU,iBACVC,MAAO,CACLE,WAAW,aAAD,OAAeZ,EAAf,MACVa,UAAU,cAAD,QAAkBR,EAAlB,QAJb,SAOGP,EAAOgB,KAAI,SAAAC,GAAK,OACf,oBACEN,UAAU,iBADZ,SAIE,qBACEC,MAAO,CACLC,MAAM,GAAD,OAAKV,EAAL,OAEPQ,UAAU,kBACVO,IAAKD,EACLE,IAAKF,KARFA,QAcX,wBACEG,QAxC0B,WAC9B,IAAMC,EAAqBC,KAAKC,IAAI,EAAGhB,EAAkBH,EAAOD,GAEhEK,EAAmBa,IAsCfV,UAAU,6CACVa,KAAK,SACLC,SAA8B,IAApBlB,EAJZ,kBAQA,wBACEa,QAzD0B,WAC9B,IAAMC,EAAqBC,KAAKI,KAC7B1B,EAAOU,OAASL,GAAaF,EAC9BI,EAAkBH,EAAOD,GAG3BK,EAAmBa,IAoDf,UAAQ,OACRV,UAAU,wCACVa,KAAK,SACLC,SAAUlB,IAAoBE,EALhC,sB,cCjEOkB,EAA6B,SAAC,GAOpC,IANLC,EAMI,EANJA,YACAC,EAKI,EALJA,UACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,kBACAC,EACI,EADJA,SAEA,EAAoC3B,mBAAS0B,GAA7C,mBAAOE,EAAP,KAAmBC,EAAnB,KAOA,OACE,sBAAKxB,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQyB,QAASN,EAAlC,SAA8CD,IAE9C,qBAAKlB,UAAU,UAAf,SACE,uBACEsB,SAXmB,SAACI,GAC1BF,GAAeE,EAAMC,OAAOC,OAC5BN,EAASI,IAUHG,KAAMV,EACNnB,UAAU,QACVa,KAAK,OACLe,MAAOL,GAAc,GACrBN,YAAaA,MAGhBG,GACI,mBAAGpB,UAAU,iBAAb,2BAA0CkB,EAAUY,qBCzBzDC,EAA0D,CAC9DC,mBAAmB,EACnBC,mBAAmB,EACnBC,cAAc,EACdC,2BAA2B,GAGvBC,EAAsC,CAC1C5C,UAAW,EACXE,UAAW,EACXD,KAAM,EACNF,kBAAmB,EACnB8C,UAAU,GAGCC,EAAqC,SAAC,GAG5C,IAFLC,EAEI,EAFJA,SACAC,EACI,EADJA,qBAEA,EACI7C,mBAAS6C,GADb,mBAAOC,EAAP,KAAyBC,EAAzB,KAEA,EAAkC/C,mBAAS,GAA3C,mBAAOgD,EAAP,KAAkBC,EAAlB,KACA,EAA4BjD,mBAASoC,GAArC,mBAAOc,EAAP,KAAeC,EAAf,KAEMC,EAAqB,SAACrB,GAC1B,IAAMsB,EAAYtB,EAAMC,OAAOE,KAEzBD,GAASF,EAAMC,OAAOC,MAE5Bc,EAAoB,2BACfD,GADc,kBAEhBO,EAAYpB,MAIXqB,EAAc,WAClBL,GAAa,SAAAM,GAAY,OAAIA,EAAe,KAC5CR,EAAoBN,IA+BtB,OACE,uBACEpC,UAAU,gBAEVmD,QAASF,EACTV,SAjCiB,SAACb,GACpBA,EAAM0B,iBAENN,EAAU,CACRd,oBAAqBS,EAAiBjD,UAAY,GAClD2C,4BAA6BM,EAAiBlD,kBAAoB,GAClE0C,oBAAqBQ,EAAiB/C,UAAY,GAClDwC,eAAgBO,EAAiBhD,KAAO,KAGtCgD,EAAiBlD,kBAAoB,GACpCkD,EAAiB/C,UAAY,GAC7B+C,EAAiBjD,UAAY,GAC7BiD,EAAiBhD,KAAO,IAE3B8C,EAASE,GACTQ,MAaF,UAOE,cAAC,EAAD,CACE5B,kBAAmBoB,EAAiBjD,UACpC2B,UAAU,YACVF,YAAY,mBACZC,UAAU,aACVE,SAAUyB,EAAOb,kBACjBV,SAAUyB,IAGZ,cAAC,EAAD,CACE1B,kBAAmBoB,EAAiB/C,UACpCyB,UAAU,YACVF,YAAY,mBACZC,UAAU,aACVE,SAAUyB,EAAOZ,kBACjBX,SAAUyB,IAGZ,cAAC,EAAD,CACE1B,kBAAmBoB,EAAiBhD,KACpC0B,UAAU,OACVF,YAAY,aACZC,UAAU,OACVE,SAAUyB,EAAOX,aACjBZ,SAAUyB,IAGZ,cAAC,EAAD,CACE1B,kBAAmBoB,EAAiBlD,kBACpC4B,UAAU,oBACVF,YAAY,2BACZC,UAAU,qBACVE,SAAUyB,EAAOV,0BACjBb,SAAUyB,IAGZ,qBAAK/C,UAAU,QAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBAAOA,UAAU,WAAjB,UACE,uBACEa,KAAK,WACLS,SAAU,SAACI,GAAD,OAxDpB,SAACA,GACDgB,EAAoB,2BACfD,GADc,IAEjBJ,SAAUX,EAAMC,OAAO0B,WAqDMC,CAA2B5B,MAHpD,uBAUJ,sBAAK1B,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBAAQa,KAAK,SAASb,UAAU,iBAAhC,sBAIF,qBAAKA,UAAU,UAAf,SAEE,wBAAQa,KAAK,QAAQb,UAAU,0BAA/B,2BA7DC2C,ICvFEH,EAAuB,CAClC/C,KAAM,EACNC,UAAW,EACXF,UAAW,IACXD,kBAAmB,IACnB8C,UAAU,GCQNkB,E,4MACJC,MAAe,CACbnE,OAAQ,CACN,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,gBAGFC,cAAekD,G,EAGjBiB,oBAAsB,SAACC,GACrB,EAAKC,SAAS,CAAErE,cAAeoE,K,4CAGjC,WACE,IAAQrE,EAAWuE,KAAKJ,MAAhBnE,OACAC,EAAkBsE,KAAKJ,MAAvBlE,cAER,OACE,sBAAKU,UAAU,MAAf,UACE,oBAAI,UAAQ,QAAQA,UAAU,+BAA9B,iCACoBX,EAAOU,OAD3B,aAIA,cAAC,EAAD,CACEV,OAAQuE,KAAKJ,MAAMnE,OACnBC,cAAeA,IAGjB,cAAC,EAAD,CACEiD,SAAUqB,KAAKH,oBACfjB,qBAAsBlD,W,GAvCduE,IAAMC,WA8CTP,ICxDfQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.851c9c12.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\nimport { CarouselRules } from '../../types/CarouselRules';\n\ntype Props = {\n  images: string[],\n  carouselRules: CarouselRules,\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  carouselRules: {\n    animationDuration,\n    itemWidth,\n    step,\n    frameSize,\n  },\n}) => {\n  const [translateXValue, setTranslateXValue] = useState(0);\n\n  const handleNextButtonClicked = () => {\n    const newTranslateXValue = Math.min(\n      (images.length - frameSize) * itemWidth,\n      translateXValue + step * itemWidth,\n    );\n\n    setTranslateXValue(newTranslateXValue);\n  };\n\n  const handlePrevButtonClicked = () => {\n    const newTranslateXValue = Math.max(0, translateXValue - step * itemWidth);\n\n    setTranslateXValue(newTranslateXValue);\n  };\n\n  const maxTranslationXValue = (images.length - frameSize) * itemWidth;\n\n  return (\n    <div\n      className=\"Carousel\"\n      style={{\n        width: `${frameSize * itemWidth}px`,\n      }}\n    >\n      <ul\n        className=\"Carousel__list\"\n        style={{\n          transition: `transform ${animationDuration}ms`,\n          transform: `translateX(${-(translateXValue)}px)`,\n        }}\n      >\n        {images.map(image => (\n          <li\n            className=\"Carousel__item\"\n            key={image}\n          >\n            <img\n              style={{\n                width: `${itemWidth}px`,\n              }}\n              className=\"Carousel__image\"\n              src={image}\n              alt={image}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <button\n        onClick={handlePrevButtonClicked}\n        className=\"button is-info mr-2 Carousel__button--prev\"\n        type=\"button\"\n        disabled={translateXValue === 0}\n      >\n        Prev\n      </button>\n      <button\n        onClick={handleNextButtonClicked}\n        data-cy=\"next\"\n        className=\"button is-info Carousel__button--next\"\n        type=\"button\"\n        disabled={translateXValue === maxTranslationXValue}\n      >\n        Next\n      </button>\n\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React, { useState } from 'react';\n\ntype Props = {\n  hasError: boolean,\n  placeholder: string,\n  labelText: string,\n  inputName: string,\n  inputInitialValue: number,\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void,\n};\n\nexport const TextInput: React.FC<Props> = ({\n  placeholder,\n  labelText,\n  inputName,\n  hasError,\n  inputInitialValue,\n  onChange,\n}) => {\n  const [inputValue, setInputValue] = useState(inputInitialValue);\n\n  const handleInputChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(+event.target.value);\n    onChange(event);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={inputName}>{labelText}</label>\n\n      <div className=\"control\">\n        <input\n          onChange={handleInputChanged}\n          name={inputName}\n          className=\"input\"\n          type=\"text\"\n          value={inputValue || ''}\n          placeholder={placeholder}\n        />\n      </div>\n      {hasError\n        && <p className=\"help is-danger\">{`Invalid ${labelText.toLowerCase()}`}</p>}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextInput } from '../TextInput';\nimport { CarouselRules } from '../../types/CarouselRules';\n\ntype Props = {\n  initialCarouselRules: CarouselRules\n  onSubmit: (newRules: CarouselRules) => void,\n};\n\ntype CarouselRulesFormErrors = {\n  hasItemWidthError: boolean,\n  hasFrameSizeError: boolean,\n  hasStepError: boolean,\n  hasAnimationDurationError: boolean,\n};\n\nconst defaultCarouselRulesFormErrors: CarouselRulesFormErrors = {\n  hasItemWidthError: false,\n  hasFrameSizeError: false,\n  hasStepError: false,\n  hasAnimationDurationError: false,\n};\n\nconst resetedCarouselRules: CarouselRules = {\n  itemWidth: 0,\n  frameSize: 0,\n  step: 0,\n  animationDuration: 0,\n  infinite: false,\n};\n\nexport const CarouselRulesForm: React.FC<Props> = ({\n  onSubmit,\n  initialCarouselRules,\n}) => {\n  const [newCarouselRules, setNewCarouselRules]\n    = useState(initialCarouselRules);\n  const [formState, setFormState] = useState(0);\n  const [errors, setErrors] = useState(defaultCarouselRulesFormErrors);\n\n  const handleFieldChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const fieldName = event.target.name;\n    // eslint-disable-next-line prefer-destructuring\n    const value = +event.target.value;\n\n    setNewCarouselRules({\n      ...newCarouselRules,\n      [fieldName]: value,\n    });\n  };\n\n  const handleReset = () => {\n    setFormState(currentState => currentState + 1);\n    setNewCarouselRules(resetedCarouselRules);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setErrors({\n      hasItemWidthError: !(newCarouselRules.itemWidth > 0),\n      hasAnimationDurationError: !(newCarouselRules.animationDuration > 0),\n      hasFrameSizeError: !(newCarouselRules.frameSize > 0),\n      hasStepError: !(newCarouselRules.step > 0),\n    });\n\n    if (newCarouselRules.animationDuration > 0\n      && newCarouselRules.frameSize > 0\n      && newCarouselRules.itemWidth > 0\n      && newCarouselRules.step > 0\n    ) {\n      onSubmit(newCarouselRules);\n      handleReset();\n    }\n  };\n\n  const handleInfiniteInputChanged\n  = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewCarouselRules({\n      ...newCarouselRules,\n      infinite: event.target.checked,\n    });\n  };\n\n  return (\n    <form\n      className=\"box App__form\"\n      key={formState}\n      onReset={handleReset}\n      onSubmit={handleSubmit}\n    >\n\n      <TextInput\n        inputInitialValue={newCarouselRules.itemWidth}\n        inputName=\"itemWidth\"\n        placeholder=\"Enter item width\"\n        labelText=\"Item width\"\n        hasError={errors.hasItemWidthError}\n        onChange={handleFieldChanged}\n      />\n\n      <TextInput\n        inputInitialValue={newCarouselRules.frameSize}\n        inputName=\"frameSize\"\n        placeholder=\"Enter frame size\"\n        labelText=\"Frame size\"\n        hasError={errors.hasFrameSizeError}\n        onChange={handleFieldChanged}\n      />\n\n      <TextInput\n        inputInitialValue={newCarouselRules.step}\n        inputName=\"step\"\n        placeholder=\"Enter step\"\n        labelText=\"Step\"\n        hasError={errors.hasStepError}\n        onChange={handleFieldChanged}\n      />\n\n      <TextInput\n        inputInitialValue={newCarouselRules.animationDuration}\n        inputName=\"animationDuration\"\n        placeholder=\"Enter animation duration\"\n        labelText=\"Animation duration\"\n        hasError={errors.hasAnimationDurationError}\n        onChange={handleFieldChanged}\n      />\n\n      <div className=\"field\">\n        <div className=\"control\">\n          <label className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              onChange={(event) => handleInfiniteInputChanged(event)}\n            />\n            Infinite mode\n          </label>\n        </div>\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button type=\"submit\" className=\"button is-link\">\n            Submit\n          </button>\n        </div>\n        <div className=\"control\">\n          {/* eslint-disable-next-line */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Cancel\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","export const initialCarouselRules = {\n  step: 3,\n  frameSize: 3,\n  itemWidth: 130,\n  animationDuration: 1000,\n  infinite: false,\n};\n","import React from 'react';\nimport 'bulma';\nimport './App.scss';\nimport Carousel from './components/Carousel/Carousel';\nimport { CarouselRules } from './types/CarouselRules';\nimport { CarouselRulesForm } from './components/CarouselRulesForm';\nimport { initialCarouselRules } from './constants/InitialCarouselRules';\n\ninterface State {\n  images: string[];\n  carouselRules: CarouselRules;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n\n    carouselRules: initialCarouselRules,\n  };\n\n  updateCarouselRules = (newRules: CarouselRules) => {\n    this.setState({ carouselRules: newRules });\n  };\n\n  render() {\n    const { images } = this.state;\n    const { carouselRules } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 data-cy=\"title\" className=\"title has-text-centered pb-6\">\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <Carousel\n          images={this.state.images}\n          carouselRules={carouselRules}\n        />\n\n        <CarouselRulesForm\n          onSubmit={this.updateCarouselRules}\n          initialCarouselRules={carouselRules}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}